// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package apiserverquery

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"apiserver/dal/apiserverdb/apiservermodel"
)

func newTbUserToken(db *gorm.DB, opts ...gen.DOOption) tbUserToken {
	_tbUserToken := tbUserToken{}

	_tbUserToken.tbUserTokenDo.UseDB(db, opts...)
	_tbUserToken.tbUserTokenDo.UseModel(&apiservermodel.TbUserToken{})

	tableName := _tbUserToken.tbUserTokenDo.TableName()
	_tbUserToken.ALL = field.NewAsterisk(tableName)
	_tbUserToken.UserID = field.NewUint64(tableName, "user_id")
	_tbUserToken.Token = field.NewString(tableName, "token")
	_tbUserToken.ExpireTime = field.NewTime(tableName, "expire_time")
	_tbUserToken.RefreshTime = field.NewTime(tableName, "refresh_time")
	_tbUserToken.CreatedAt = field.NewTime(tableName, "created_at")
	_tbUserToken.UpdatedAt = field.NewTime(tableName, "updated_at")
	_tbUserToken.DeletedAt = field.NewField(tableName, "deleted_at")

	_tbUserToken.fillFieldMap()

	return _tbUserToken
}

type tbUserToken struct {
	tbUserTokenDo tbUserTokenDo

	ALL         field.Asterisk
	UserID      field.Uint64
	Token       field.String // token
	ExpireTime  field.Time   // 过期时间
	RefreshTime field.Time   // 更新时间
	CreatedAt   field.Time   // 创建时间
	UpdatedAt   field.Time
	DeletedAt   field.Field

	fieldMap map[string]field.Expr
}

func (t tbUserToken) Table(newTableName string) *tbUserToken {
	t.tbUserTokenDo.UseTable(newTableName)
	return t.updateTableName(newTableName)
}

func (t tbUserToken) As(alias string) *tbUserToken {
	t.tbUserTokenDo.DO = *(t.tbUserTokenDo.As(alias).(*gen.DO))
	return t.updateTableName(alias)
}

func (t *tbUserToken) updateTableName(table string) *tbUserToken {
	t.ALL = field.NewAsterisk(table)
	t.UserID = field.NewUint64(table, "user_id")
	t.Token = field.NewString(table, "token")
	t.ExpireTime = field.NewTime(table, "expire_time")
	t.RefreshTime = field.NewTime(table, "refresh_time")
	t.CreatedAt = field.NewTime(table, "created_at")
	t.UpdatedAt = field.NewTime(table, "updated_at")
	t.DeletedAt = field.NewField(table, "deleted_at")

	t.fillFieldMap()

	return t
}

func (t *tbUserToken) WithContext(ctx context.Context) ITbUserTokenDo {
	return t.tbUserTokenDo.WithContext(ctx)
}

func (t tbUserToken) TableName() string { return t.tbUserTokenDo.TableName() }

func (t tbUserToken) Alias() string { return t.tbUserTokenDo.Alias() }

func (t *tbUserToken) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := t.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (t *tbUserToken) fillFieldMap() {
	t.fieldMap = make(map[string]field.Expr, 7)
	t.fieldMap["user_id"] = t.UserID
	t.fieldMap["token"] = t.Token
	t.fieldMap["expire_time"] = t.ExpireTime
	t.fieldMap["refresh_time"] = t.RefreshTime
	t.fieldMap["created_at"] = t.CreatedAt
	t.fieldMap["updated_at"] = t.UpdatedAt
	t.fieldMap["deleted_at"] = t.DeletedAt
}

func (t tbUserToken) clone(db *gorm.DB) tbUserToken {
	t.tbUserTokenDo.ReplaceConnPool(db.Statement.ConnPool)
	return t
}

func (t tbUserToken) replaceDB(db *gorm.DB) tbUserToken {
	t.tbUserTokenDo.ReplaceDB(db)
	return t
}

type tbUserTokenDo struct{ gen.DO }

type ITbUserTokenDo interface {
	gen.SubQuery
	Debug() ITbUserTokenDo
	WithContext(ctx context.Context) ITbUserTokenDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ITbUserTokenDo
	WriteDB() ITbUserTokenDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ITbUserTokenDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ITbUserTokenDo
	Not(conds ...gen.Condition) ITbUserTokenDo
	Or(conds ...gen.Condition) ITbUserTokenDo
	Select(conds ...field.Expr) ITbUserTokenDo
	Where(conds ...gen.Condition) ITbUserTokenDo
	Order(conds ...field.Expr) ITbUserTokenDo
	Distinct(cols ...field.Expr) ITbUserTokenDo
	Omit(cols ...field.Expr) ITbUserTokenDo
	Join(table schema.Tabler, on ...field.Expr) ITbUserTokenDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ITbUserTokenDo
	RightJoin(table schema.Tabler, on ...field.Expr) ITbUserTokenDo
	Group(cols ...field.Expr) ITbUserTokenDo
	Having(conds ...gen.Condition) ITbUserTokenDo
	Limit(limit int) ITbUserTokenDo
	Offset(offset int) ITbUserTokenDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ITbUserTokenDo
	Unscoped() ITbUserTokenDo
	Create(values ...*apiservermodel.TbUserToken) error
	CreateInBatches(values []*apiservermodel.TbUserToken, batchSize int) error
	Save(values ...*apiservermodel.TbUserToken) error
	First() (*apiservermodel.TbUserToken, error)
	Take() (*apiservermodel.TbUserToken, error)
	Last() (*apiservermodel.TbUserToken, error)
	Find() ([]*apiservermodel.TbUserToken, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*apiservermodel.TbUserToken, err error)
	FindInBatches(result *[]*apiservermodel.TbUserToken, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*apiservermodel.TbUserToken) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ITbUserTokenDo
	Assign(attrs ...field.AssignExpr) ITbUserTokenDo
	Joins(fields ...field.RelationField) ITbUserTokenDo
	Preload(fields ...field.RelationField) ITbUserTokenDo
	FirstOrInit() (*apiservermodel.TbUserToken, error)
	FirstOrCreate() (*apiservermodel.TbUserToken, error)
	FindByPage(offset int, limit int) (result []*apiservermodel.TbUserToken, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ITbUserTokenDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (t tbUserTokenDo) Debug() ITbUserTokenDo {
	return t.withDO(t.DO.Debug())
}

func (t tbUserTokenDo) WithContext(ctx context.Context) ITbUserTokenDo {
	return t.withDO(t.DO.WithContext(ctx))
}

func (t tbUserTokenDo) ReadDB() ITbUserTokenDo {
	return t.Clauses(dbresolver.Read)
}

func (t tbUserTokenDo) WriteDB() ITbUserTokenDo {
	return t.Clauses(dbresolver.Write)
}

func (t tbUserTokenDo) Session(config *gorm.Session) ITbUserTokenDo {
	return t.withDO(t.DO.Session(config))
}

func (t tbUserTokenDo) Clauses(conds ...clause.Expression) ITbUserTokenDo {
	return t.withDO(t.DO.Clauses(conds...))
}

func (t tbUserTokenDo) Returning(value interface{}, columns ...string) ITbUserTokenDo {
	return t.withDO(t.DO.Returning(value, columns...))
}

func (t tbUserTokenDo) Not(conds ...gen.Condition) ITbUserTokenDo {
	return t.withDO(t.DO.Not(conds...))
}

func (t tbUserTokenDo) Or(conds ...gen.Condition) ITbUserTokenDo {
	return t.withDO(t.DO.Or(conds...))
}

func (t tbUserTokenDo) Select(conds ...field.Expr) ITbUserTokenDo {
	return t.withDO(t.DO.Select(conds...))
}

func (t tbUserTokenDo) Where(conds ...gen.Condition) ITbUserTokenDo {
	return t.withDO(t.DO.Where(conds...))
}

func (t tbUserTokenDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) ITbUserTokenDo {
	return t.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (t tbUserTokenDo) Order(conds ...field.Expr) ITbUserTokenDo {
	return t.withDO(t.DO.Order(conds...))
}

func (t tbUserTokenDo) Distinct(cols ...field.Expr) ITbUserTokenDo {
	return t.withDO(t.DO.Distinct(cols...))
}

func (t tbUserTokenDo) Omit(cols ...field.Expr) ITbUserTokenDo {
	return t.withDO(t.DO.Omit(cols...))
}

func (t tbUserTokenDo) Join(table schema.Tabler, on ...field.Expr) ITbUserTokenDo {
	return t.withDO(t.DO.Join(table, on...))
}

func (t tbUserTokenDo) LeftJoin(table schema.Tabler, on ...field.Expr) ITbUserTokenDo {
	return t.withDO(t.DO.LeftJoin(table, on...))
}

func (t tbUserTokenDo) RightJoin(table schema.Tabler, on ...field.Expr) ITbUserTokenDo {
	return t.withDO(t.DO.RightJoin(table, on...))
}

func (t tbUserTokenDo) Group(cols ...field.Expr) ITbUserTokenDo {
	return t.withDO(t.DO.Group(cols...))
}

func (t tbUserTokenDo) Having(conds ...gen.Condition) ITbUserTokenDo {
	return t.withDO(t.DO.Having(conds...))
}

func (t tbUserTokenDo) Limit(limit int) ITbUserTokenDo {
	return t.withDO(t.DO.Limit(limit))
}

func (t tbUserTokenDo) Offset(offset int) ITbUserTokenDo {
	return t.withDO(t.DO.Offset(offset))
}

func (t tbUserTokenDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ITbUserTokenDo {
	return t.withDO(t.DO.Scopes(funcs...))
}

func (t tbUserTokenDo) Unscoped() ITbUserTokenDo {
	return t.withDO(t.DO.Unscoped())
}

func (t tbUserTokenDo) Create(values ...*apiservermodel.TbUserToken) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Create(values)
}

func (t tbUserTokenDo) CreateInBatches(values []*apiservermodel.TbUserToken, batchSize int) error {
	return t.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (t tbUserTokenDo) Save(values ...*apiservermodel.TbUserToken) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Save(values)
}

func (t tbUserTokenDo) First() (*apiservermodel.TbUserToken, error) {
	if result, err := t.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*apiservermodel.TbUserToken), nil
	}
}

func (t tbUserTokenDo) Take() (*apiservermodel.TbUserToken, error) {
	if result, err := t.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*apiservermodel.TbUserToken), nil
	}
}

func (t tbUserTokenDo) Last() (*apiservermodel.TbUserToken, error) {
	if result, err := t.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*apiservermodel.TbUserToken), nil
	}
}

func (t tbUserTokenDo) Find() ([]*apiservermodel.TbUserToken, error) {
	result, err := t.DO.Find()
	return result.([]*apiservermodel.TbUserToken), err
}

func (t tbUserTokenDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*apiservermodel.TbUserToken, err error) {
	buf := make([]*apiservermodel.TbUserToken, 0, batchSize)
	err = t.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (t tbUserTokenDo) FindInBatches(result *[]*apiservermodel.TbUserToken, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return t.DO.FindInBatches(result, batchSize, fc)
}

func (t tbUserTokenDo) Attrs(attrs ...field.AssignExpr) ITbUserTokenDo {
	return t.withDO(t.DO.Attrs(attrs...))
}

func (t tbUserTokenDo) Assign(attrs ...field.AssignExpr) ITbUserTokenDo {
	return t.withDO(t.DO.Assign(attrs...))
}

func (t tbUserTokenDo) Joins(fields ...field.RelationField) ITbUserTokenDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Joins(_f))
	}
	return &t
}

func (t tbUserTokenDo) Preload(fields ...field.RelationField) ITbUserTokenDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Preload(_f))
	}
	return &t
}

func (t tbUserTokenDo) FirstOrInit() (*apiservermodel.TbUserToken, error) {
	if result, err := t.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*apiservermodel.TbUserToken), nil
	}
}

func (t tbUserTokenDo) FirstOrCreate() (*apiservermodel.TbUserToken, error) {
	if result, err := t.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*apiservermodel.TbUserToken), nil
	}
}

func (t tbUserTokenDo) FindByPage(offset int, limit int) (result []*apiservermodel.TbUserToken, count int64, err error) {
	result, err = t.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = t.Offset(-1).Limit(-1).Count()
	return
}

func (t tbUserTokenDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = t.Count()
	if err != nil {
		return
	}

	err = t.Offset(offset).Limit(limit).Scan(result)
	return
}

func (t tbUserTokenDo) Scan(result interface{}) (err error) {
	return t.DO.Scan(result)
}

func (t tbUserTokenDo) Delete(models ...*apiservermodel.TbUserToken) (result gen.ResultInfo, err error) {
	return t.DO.Delete(models)
}

func (t *tbUserTokenDo) withDO(do gen.Dao) *tbUserTokenDo {
	t.DO = *do.(*gen.DO)
	return t
}
